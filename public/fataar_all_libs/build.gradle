plugins {
    id 'com.android.library'
    id 'com.kezong.fat-aar'
    id 'maven-publish'
}

apply from: "$rootProject.projectDir/android_subproject.gradle"

fataar {
    /**
     * If transitive is true, we embed not only our libs, but also their dependencies. It may be needed for unity build
     */
    transitive = true
}

afterEvaluate {
    // for app test, copy the final aar to demo app
    android.libraryVariants.all { variant ->
        File outputFile = variant.outputs.first().outputFile
        tasks.named("assemble${variant.name.capitalize()}").configure {
            doLast {
                copy {
                    from outputFile
                    into "$rootProject.projectDir/demo"
                    rename outputFile.name, "fat-aar-all-libs.aar"
                }
            }
        }
    }
}

dependencies {
    embed project(path: ':public:common:asserts', configuration: 'default')
    embed project(path: ':public:common:binderhelper:api', configuration: 'default')
    embed project(path: ':public:common:binderhelper:impl', configuration: 'default')
    embed project(path: ':public:common:camera', configuration: 'default')
    embed project(path: ':public:common:coroutines', configuration: 'default')
    embed project(path: ':public:common:logger', configuration: 'default')

    embed project(path: ':public:cv:api_cv', configuration: 'default')
    embed project(path: ':public:cv:aidl', configuration: 'default')
    embed project(path: ':public:cv:entity', configuration: 'default')
    embed project(path: ':public:cv:impl', configuration: 'default')
    embed project(path: ':public:cv:proto', configuration: 'shadow')
    embed project(path: ':public:cv:util', configuration: 'default')

    embed project(path: ':public:services:appstate:aidl', configuration: 'default')
    embed project(path: ':public:services:appstate:api_appstate', configuration: 'default')
    embed project(path: ':public:services:appstate:impl', configuration: 'default')

    embed project(path: ':public:services:assistant:aidl', configuration: 'default')
    embed project(path: ':public:services:assistant:api_assistant', configuration: 'default')
    embed project(path: ':public:services:assistant:impl', configuration: 'default')

    embed project(path: ':public:services:messaging:aidl', configuration: 'default')
    embed project(path: ':public:services:messaging:api_messaging', configuration: 'default')
    embed project(path: ':public:services:messaging:impl', configuration: 'default')

    embed project(path: ':public:services:mic_camera_state:aidl', configuration: 'default')
    embed project(path: ':public:services:mic_camera_state:api_mic_camera_state', configuration: 'default')
    embed project(path: ':public:services:mic_camera_state:impl', configuration: 'default')

    embed project(path: ':public:services:paylib:aidl', configuration: 'default')
    embed project(path: ':public:services:paylib:api_paylib', configuration: 'default')
    embed project(path: ':public:services:paylib:impl', configuration: 'default')
}

afterEvaluate {
    publishing {
        repositories.add(rootProject.repositories.getByName('OSSRH'))

        publications {
            mavenAllLibs(MavenPublication) {
                from components.release

                groupId publication.pomGroupID
                artifactId "alllibs"
                version publication.pomMessagingVersion

                pom {
                    name = "alllibs"
                    description = 'alllibs'
                    url = publication.githubUrl
                    licenses {
                        license {
                            name = publication.licenseName
                            url = publication.licenseUrl
                        }
                    }
                    developers {
                        developer {
                            name = 'Irina Karpenko'
                            email = 'IViKarpenko@sberbank.ru'
                        }
                        developer {
                            name = 'Dmitry Levshunov'
                            email = 'Levshunov.D.A@sberbank.ru'
                        }
                        developer {
                            name = 'Nikolay Pahomov'
                            email = 'NMPakhomov@sberbank.ru'
                        }
                        developer {
                            name = 'Igor Perminov'
                            email = 'Perminov.I.Yurye@sberbank.ru'
                        }
                    }
                    scm {
                        connection = publication.connectionUrl
                        developerConnection = publication.connectionUrl
                        url = publication.githubUrl
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenAllLibs
    }
}