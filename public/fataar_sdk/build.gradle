plugins {
    id 'com.android.library'
    id 'com.kezong.fat-aar'
    id 'maven-publish'
}

apply from: "$rootProject.projectDir/android_subproject.gradle"

fataar {
    /**
     * If transitive is true, we embed not only our libs, but also their dependencies. It may be needed for unity build
     */
    transitive = false
}

afterEvaluate {
    // for app test, copy the final aar to demo app
    android.libraryVariants.all { variant ->
        File outputFile = variant.outputs.first().outputFile
        tasks.named("assemble${variant.name.capitalize()}").configure {
            doLast {
                copy {
                    from outputFile
                    into "$rootProject.projectDir/demo"
                    rename outputFile.name, "sdk.aar"
                }
            }
        }
    }
}

dependencies {
    api "ru.sberdevices.smartapp:common_libs:1.0.1"

    embed project(path: ':public:services:appstate:aidl', configuration: 'default')
    embed project(path: ':public:services:appstate:api_appstate', configuration: 'default')
    embed project(path: ':public:services:appstate:impl', configuration: 'default')

    embed project(path: ':public:services:assistant:aidl', configuration: 'default')
    embed project(path: ':public:services:assistant:api_assistant', configuration: 'default')
    embed project(path: ':public:services:assistant:impl', configuration: 'default')

    embed project(path: ':public:services:messaging:aidl', configuration: 'default')
    embed project(path: ':public:services:messaging:api_messaging', configuration: 'default')
    embed project(path: ':public:services:messaging:impl', configuration: 'default')

    embed project(path: ':public:services:mic_camera_state:aidl', configuration: 'default')
    embed project(path: ':public:services:mic_camera_state:api_mic_camera_state', configuration: 'default')
    embed project(path: ':public:services:mic_camera_state:impl', configuration: 'default')

    embed project(path: ':public:services:paylib:aidl', configuration: 'default')
    embed project(path: ':public:services:paylib:api_paylib', configuration: 'default')
    embed project(path: ':public:services:paylib:impl', configuration: 'default')
}

afterEvaluate {
    publishing {
        repositories.add(rootProject.repositories.getByName('OSSRH'))

        publications {
            mavenLibsSdk(MavenPublication) {
                artifact file("build/outputs/aar/fataar_sdk-release.aar")

                groupId "ru.sberdevices.smartapp"
                artifactId "sdk"
                version publication.pomSdkVersion

                pom {
                    name = "sdk"
                    description = 'sdk'
                    url = publication.githubUrl
                    licenses {
                        license {
                            name = publication.licenseName
                            url = publication.licenseUrl
                        }
                    }
                    developers {
                        developer {
                            name = 'Nikolay Pahomov'
                            email = 'NMPakhomov@sberbank.ru'
                        }
                        developer {
                            name = 'Igor Perminov'
                            email = 'Perminov.I.Yurye@sberbank.ru'
                        }
                    }
                    scm {
                        connection = publication.connectionUrl
                        developerConnection = publication.connectionUrl
                        url = publication.githubUrl
                    }
                }
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    // Iterate over the compile dependencies (we don't want the test ones),
                    // adding a <dependency> node for each
                    configurations.api.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenLibsSdk
    }
}